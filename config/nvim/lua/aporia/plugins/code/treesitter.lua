return {
	{
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		event = { "BufReadPost", "BufWritePre", "BufNewFile", "VeryLazy" },
		-- from LazyVim [treesitter.lua](https://github.com/LazyVim/LazyVim/blob/12818a6cb499456f4903c5d8e68af43753ebc869/lua/lazyvim/plugins/treesitter.lua)
		lazy = vim.fn.argc(-1) == 0,
		init = function(plugin)
			-- PERF; add nvim-treesitter queries to the rtp and it's custom query
			-- predicates early This is needed because a bunch of plugins no longer
			-- `require("nvim-treesitter")`, which no longer trigger the
			-- **nvim-treesitter** module to be loaded in time. Luckily, the only
			-- things that those plugins need are the custom queries, which we make
			-- available during startup.
			--
			-- TLDR: most plugins which depend on treesitter don't have to require it
			require("lazy.core.loader").add_to_rtp(plugin)
			require("nvim-treesitter.query_predicates")

			vim.opt.foldexpr = "nvim_treesitter#foldexpr()"

			-- register latex parser
			-- https://github.com/nvim-treesitter/nvim-treesitter?tab=readme-ov-file#adding-parsers

			-- local parser_config =
			-- 	require("nvim-treesitter.parsers").get_parser_configs()
			-- parser_config.latex = {
			-- 	install_info = {
			-- 		url = "~/.local/site/parser", -- local path or git repo
			-- 		files = { "latex.so" }, -- note that some parsers also require src/scanner.c or src/scanner.cc
			-- 		-- optional entries:
			-- 		branch = "main", -- default branch in case of git repo if different from master
			-- 		generate_requires_npm = false, -- if stand-alone parser without npm dependencies
			-- 		requires_generate_from_grammar = false, -- if folder contains pre-generated src/parser.c
			-- 	},
			-- 	filetype = "latex", -- if filetype does not match the parser name
			-- }
			--
		end,

		opts_extend = { "ensure_installed" },
		-- normal mode 'zi' to enable folding
		--vim.opt.foldmethod = "expr"
		opts = {
			auto_install = false,
			sync_install = false,
			ignore_install = {},
			modules = {},
			-- TODO:
			--  * lua indent
			--  * cpp clangd, clang-format, indentation
			ensure_installed = {
        "python",
				"bash",
				"cpp",
				"haskell",
				"json",
				"lua",
				"markdown",
				"markdown_inline",
				"nix",
				"query",
				"regex",
				"vim",
				"vimdoc",
			},
			--auto_install = true,
			--ignore_install = { "javascript" },
			highlight = {
				enable = true,
				--additional_vim_regex_highlighting = true,
			},
			indent = {
				enable = true,
				disable = { "markdown", "markdown_inline" },
			},
			incremental_selection = {
				enable = true,
        -- init_selection = "<C-n>"
			},
		},

		config = function(_, opts)
			require("nvim-treesitter.configs").setup(opts)

			vim.opt.foldexpr = "nvim_treesitter#foldexpr()"
			vim.opt.foldlevelstart = 2
			-- vim.opt.foldenable = false
		end,
	},

	-- leave default config as is as we're using mini.ai with the .scm (query
	-- file, I think) generated by nvim-treesitter-textobjects
	{
		"nvim-treesitter/nvim-treesitter-textobjects",
		event = "VeryLazy",
		--enabled = true,
		config = false,
		--local util = require('aporia.util')

		-- from LazyVim treesitter.lua:
		--
		-- If treesitter is already loaded, we need to run config again for textobjects
		--if util.is_loaded("nvim-treesitter") then
		--  require("nvim-treesitter.configs").setup({
		--    textobjects = { move = { enable = true, set_jumps = true } },
		--  })
		--end
	},
}
