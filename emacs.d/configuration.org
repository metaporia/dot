#+TITLE: Emacs Dotfile
#+AUTHOR: Keane Yahn-Krafft


* Introduction                                                         :meta:

  Miscellaneous tasks, notes, etc.  org-mode
  See [[http://doc.norang.ca/org-mode.html#OrgFile][NoRang Org-Mode guide]].


** Literate Emacs Config Log                                          :meta:

Here I explore the potential uses, for myself, that is, of literate
programming. My hope is that I can provide chronological, narrative
documentation of development, whether pertaining to org mode, emacs,
neovim, bash/fish scripts & config, and, in the best case, even
non-trivial programming projects, e.g., on [[file+sys:~/muse][muse]].

*** (Idealized) Usage of This Log

When using emacs and I find myself without some desired functionality:

1. add a subsection (or a capture to refile later) with the current
   date including the purpose and motivation of the task, potential
   &c;
2. resume the interrupted work (unless it's critical); and,
3. during work time allotted to configuration/meta-tasks describe your
   attempt to resolve the issue.

*** DONE Find desirable emacs theme

1. Install theme, [[https://github.com/purcell/color-theme-sanityinc-tomorrow][sanityinc-tommorow]], used in the video [[http:https://www.youtube.com/watch?v=dljNabciEGg&list=PLCheRlMQsel0b7cWSkXBSrr74tVfht2XW][Literate Devops with Emacs]].
2. Enable in config.

*** DONE Switch to literate emacs config

As per the instructions of [[https://harryrschwartz.com/2016/02/15/switching-to-a-literate-emacs-configuration][this blog post]], we move the bulk of our configuration
into [[~/.emacs.d/configuration.org][configuration.org]], settings generated with emacs' customization interface 
into [[~/.emacs.d/custom.el][custom.el]], and then replace [[~/.emacs.d/init.el][init.el]] with:
#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-load-file "~/emacs.d/configuration.org")
   and, so injected settings don't muck up our manually managed settings,

  (setq-default custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
        (load custom-file))
#+END_SRC

That is to say, this section, in its very success, has rendered itself useless.

See [[~/.emacs.d/configuration.org][configuration.org]] for the completion of this brief tale.


*** Babel

Babel is Atlas to the world of org literate programming. Get it sorted.

It seems to already be installed; on to usage.

Let's try an example in python:

#+BEGIN_SRC python
print('Hello babel--python')
#+END_SRC

Whelp, that didn't work--no org-babel-excute for python on this system!

Let's enable that.
** Key Bindings [0/5]
- [ ] Open all files in ~/org without _archive.org suffix
- [ ] Restore overriden org-mode functionality [0/2]
  - [ ] C-c C-r  org-reveal
  - [ ] find more shadowed bindings
- [ ] Add archive binding better than C-c C-x C-s
- [ ] Remove helm leader binding: <leader>x
- [ ] C-x b (switchb) is a stretch; replace it
- [ ] Remap C-w to =backward-kill-word= 

Remap to =backward-kill-word= in all modes where it would not shadow
an important binding .

=backward-kill-word= works while the company completion popup is
active, while evil-delete-backward-word does not. This is a
problematically incongruous with my vim/bash/emacs muscle memory,
which expects C-w to work in all contexts.

** TODO Customize agenda view [0/3]
- [ ] Show 10 days out
- [ ] Group TODOs with NEXT tag
- [ ] Add views for school, todo, meta

** TODO pick archive method for, e.g., config tasks
** TODO import calendar files (*.ics)                               :school:

** DONE try out evil-org [1/1]
CLOSED: [2019-10-09 Wed 16:04]
- [X] use use-package
:LOGBOOK:
- Note taken on [2019-10-09 Wed 16:20] \\
  Example note.
- State "DONE"       from "TODO"       [2019-10-09 Wed 16:04]
CLOCK: [2019-10-09 Wed 14:36]--[2019-10-09 Wed 14:39] =>  0:03
:END:
[2019-10-09 Wed 14:36]
** DONE add font [[https://typeof.net/Iosevka/][Iosevka]]


* Load =.custom.el=

So injected settings don't muck up our manually managed settings we
store them elsewhere

#+BEGIN_SRC emacs-lisp
  (setq-default custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
      (load custom-file))
#+END_SRC

#+RESULTS:
: ~/.emacs.d/custom.el

* Misc
** On startup open personal org file by default

#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice "~/org/todo.org")
#+END_SRC

** TODO research garbage collection (see gc-cons-threshold and
[[https://emacs.stackexchange.com/questions/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][this solution on stack exchange]]).

** TODO suppress results of babel elisp blocks in this file--it's mere clutter

** Parentheses debug mode

Provide function [[elisp:paren-debug-mode][paren-debug-mode]].
Helpful when facing the classic "end of file during parsing" error.

#+BEGIN_SRC emacs-lisp
  (defun paren-debug-mode ()
    (show-paren-mode t)
    (setq show-paren-style 'expression))
#+END_SRC


** Follow Visual Links
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
* Startup

N.B. Deferred package initialization is set up in [[~/.emacs.d/init.el]].


** Sensible UI defaults
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore 
        inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  (when (display-graphic-p)
        (blink-cursor-mode -1)
        (scroll-bar-mode -1)
        (tool-bar-mode -1) 
        (menu-bar-mode -1))
        
  (visual-line-mode t)
#+END_SRC

#+RESULTS:

** Font
*** Font Size
Set font size to 10pt.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 80)
#+END_SRC

*** Font Face
So how do we add a custom font /and/ get italics? Somehow
=set-frame-font= with iosevka-normal-normal-normal and a complete
restart of emacs worked, but it won't persist.

Let's try =set-default-font=
#+BEGIN_SRC emacs-lisp
(set-frame-font "-CYEL-Iosevka-normal-normal-normal-*-*-*-*-*-d-0-iso10646-1")
#+END_SRC
Yup, that worked.

Unfortunately, Iosevka allures me only so well. So now, how
to find satisfactory font?

Candidates:
- Iosevka (naturally it's in the running)
- Hack
- Inconsolata
- Fira Code (V2 with ligatures would be divine)



* Theme

Load =sanityinc-tommorow=.

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    (color-theme-sanityinc-tomorrow-bright))
#+END_SRC

Load =smart-mode-line=.
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :config
  (setq sml/theme 'dark)
  (sml/setup)
  ;(load-theme 'deeper-blue) ; uncomment to set dark blue theme
  )
#+END_SRC

* Languages
** Elisp

Load =slime= for navigation and documentation echoes.
#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
    :ensure t
    :config
    (defun my-hook ()
      (elisp-slime-nav-mode)
      (turn-on-eldoc-mode))
    (add-hook 'emacs-lisp-mode-hook 'my-hook))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  :config
  ;; bindings
  ;;(define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
  ;;(define-key haskell-mode-map (kbd "C-c C-i") 'haskell-do-info)
  ;; (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)

  ;; tags
  (setq haskell-tags-on-save t)
  )

;; intero
(use-package intero
  :ensure t
  :config
  (define-key intero-mode-map (kbd "M-.") 'intero-goto-definition)
  (define-key intero-mode-map (kbd "<f8>") 'haskell-navigate-imports)
  ;(define-key intero-repl-mode-map (kbd "C-l") 'intero-repl-clear-buffer)
  (define-key intero-repl-mode-map (kbd "C-l") 'recenter-top-bottom)

  (defun codex-update ()
    (when (eq major-mode 'intero-mode)
      (async-shell-command  "codex update")
      ))

  (add-hook 'haskell-mode-hook 'intero-mode)
  (add-hook 'after-save-hook 'codex-update)
  (add-hook 'haskell-mode-hook 'linum-relative-mode)
  )

;; hoogle
(defun hoogle-search (term)
  "Search for given string in hoogle."
  (with-output-to-temp-buffer "*hoogle-search*"
    (shell-command (concat "stack hoogle search -- " term) "*hoogle-search*" "*Messages*")
  (pop-to-buffer "*hoogle-search*")))

(defun hoogle-info (term)
  "Search for given string in hoogle. Return documentation of first match."
  (with-output-to-temp-buffer "*hoogle-info*"
    (shell-command (concat "stack hoogle search -- -i " term) "*hoogle-info*" "*Messages*")
  (pop-to-buffer "*hoogle-info*")))

(defun hoogle-search-interactive ()
  (interactive)
  (hoogle-search (thing-at-point 'word () )))



(defun hoogle-info-interactive ()
  (interactive)
  (hoogle-info (thing-at-point 'word () )))



#+END_SRC

** Org
*** Agenda 

Treat all =*.org= files in [[~/org/][~/org]] as agenda files.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org" "~/.emacs.d/configuration.org"))
  (setq org-directory "~/org")
  (setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

*** TODO Document These Settings

#+BEGIN_SRC emacs-lisp
  ; enable org-indent-mode by default
  (setq org-startup-indented t)
  (setq org-cycle-separator-lines 0)
  (setq org-deadline-warning-days 20)
  (setq org-alphabetical-lists t)

  (setq org-fast-tag-selection-single-key t)

  (setq org-tag-alist '(("code" . ?c)
			("meta" . ?m)
			("note" . ?n)
			("personal" . ?p)
			("school" . ?s)))

  (setq org-todo-keywords
      ;; The "|" classifies workflow states. To its left lie unfinished states, and to
      ;; its right, finished states.
      ;;
      ;; "/" enables dependency enforcement.
      ;;
      (quote ((sequence "TODO(t!)" "NEXT(n!)" "|" "DONE(d!)")
	      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@!)"))))

  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
  (setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "journal" entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ;;("m" "Meeting" entry (file "~/org/refile.org")
              ;; "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("h" "habit" entry (file "~/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

  ;; refile setup



  ;; targets include agenda files up to depth=9
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
				 (org-agenda-files :maxlevel . 9))))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  ;; allow parent creation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))

  ;; ido
  ;;(setq org-completion-use-ido t)

  ; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)

  ;; agenda bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC

*** Evil org

* Features
** Company (completion)

Bind vim completion popup navigation <C-n>, <C-p>

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :commands global-company-mode
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-active-map(kbd "C-n") 'company-select-next-or-abort)
    (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort))
#+END_SRC
** Dictionary (dico/dicod)

Dico wrapper—note this relies on =dico= and, ideally, =dicod=.

N.B. The mapping <leader>-d is bound by =evil=.
#+BEGIN_SRC emacs-lisp
(defun define-word-wrapped (word)
  "Read a word and pass it to dico(1)."
  (with-output-to-temp-buffer "*dico-define*"
    (shell-command (concat "d " word) "*dico-define*" "*Messages*")
  (pop-to-buffer "*dico-define*")))

(defun define-word ()
  (interactive)
  (define-word-wrapped (thing-at-point 'word () )))

#+END_SRC
** Evil
*** Evil Itself
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode t)

  (setq evil-want-C-i-jump t)

  (setq evil-emacs-state-modes (delq 'ibuffer-mode
				     ;; from:
				     evil-emacs-state-modes))
  
  (setq evil-emacs-state-modes (delq 'completion-list-mode
				     ;; from:
				     evil-emacs-state-modes))
				     
  (define-key evil-insert-state-map (kbd "C-u")
    (lambda ()
      (interactive)
      (if (looking-back "^" 0)
	  (backward-delete-char 1)
      (if (looking-back "^\s*" 0)
	  (delete-region (point) (line-beginning-position))
          (evil-delete (+ (line-beginning-position) (current-indentation)) (point))))))
  (define-key evil-normal-state-map (kbd "C-k") 'evil-delete-buffer)

  ; slime-nav documentation lookup
  (evil-define-key 'normal emacs-lisp-mode-map (kbd "K")
    'elisp-slime-nav-describe-elisp-thing-at-point)

  (use-package evil-escape
    :ensure t
    :config
    (evil-escape-mode)
    (setq-default evil-escape-key-sequence "jk"))
  
  (use-package evil-leader
    :ensure t
    
    :config
    (progn
	(evil-leader/set-leader ",")
	;; other leader bindings (?)
	(evil-leader/set-key
	  "w" 'save-buffer
	  "," 'other-window
	  "h" 'dired-jump ;; tentative
	  "e" 'pp-eval-last-sexp
	  "b" 'ibuffer ;; tentative
	  "d" 'define-word)
	)
    (global-evil-leader-mode))
  
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-magit
    :ensure t)
  )
#+END_SRC
** Ido
Enable ido completion wherever possible.
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (ido-mode t)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  ; Use the current window when visiting files and buffers with ido
  (setq ido-default-file-method 'selected-window)
  (setq ido-default-buffer-method 'selected-window)
  ; Use the current window for indirect buffer display
  ;(setq org-indirect-buffer-display 'current-window)
  (require 'ido-completing-read+)
  (ido-ubiquitous-mode 1))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC

** Which-Key

TODO: Remove when sufficiently comfortable with emacs bindings.
Alternatively, leave it (as long as it bloats negligibly) and increase
the delay, so that it shows key-chord paths when the user delays (and
therefore probably wants assistance) and remains untriggered when
chords are entered quickly.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
** Evil Collection

NB: the below /must proceed/ magit, elisp-slime-nav.

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
	    (lambda ()
	      (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))


#+END_SRC

